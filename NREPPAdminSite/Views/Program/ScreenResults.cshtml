@model NREPPAdminSite.Models.ScreeningModel

@{
    ViewBag.Title = "ScreenResults";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>ScreenResults</h2>

@functions{
    string MeasuresList(int OutcomeId)
    {
        string outValue = "";
        foreach(NREPPAdminSite.Models.OutcomeMeasure measure in Model.Outcomes.OutcomesMeasures) // Use LINQ for this
        {
            if (measure.OutcomeId == OutcomeId)
                outValue += measure.OutcomeMeasureName + "; ";
        }

        outValue = outValue.Trim();
        if (outValue.Length > 0)
            return outValue.Substring(0, outValue.Length - 1);
        else return outValue;
        
    }

    string PopList(int OutcomeId)
    {
        string outValue = "";
        foreach (NREPPAdminSite.Models.OutcomeMeasure measure in Model.Outcomes.OutcomesMeasures) // Use LINQ for this
        {
            if (measure.OutcomeId == OutcomeId)
                outValue += measure.PopDescription + "; ";
        }

        outValue = outValue.Trim();
        if (outValue.Length > 0)
            return outValue.Substring(0, outValue.Length - 1);
        else return outValue;

    }

    string StudyList(int OutcomeId)
    {
        string outValue = "";
        foreach (NREPPAdminSite.Models.OutcomeMeasure measure in Model.Outcomes.OutcomesMeasures) // Use LINQ for this
        {
            if (measure.OutcomeId == OutcomeId)
                outValue += "Study " + measure.StudyId.ToString() + "; ";
        }

        outValue = outValue.Trim();
        if (outValue.Length > 0)
            return outValue.Substring(0, outValue.Length - 1);
        else return outValue;

    }

    string getReference(List<NREPPAdminSite.Models.RCDocument> docs, int inDocId)
    {

        foreach (NREPPAdminSite.Models.RCDocument d in docs)
            if (d.DocId == inDocId)
                return d.Reference;

        return "Error";
    }

    string getPubYear(List<NREPPAdminSite.Models.RCDocument> docs, int inDocId)
    {

        foreach (NREPPAdminSite.Models.RCDocument d in docs)
            if (d.DocId == inDocId)
                return d.PubYear.ToString();

        return "Error";
    }
    
    
    
    NREPPAdminSite.Models.Study getStudy(int StudyID)
    {
        NREPPAdminSite.Models.Study study;
        IEnumerable<NREPPAdminSite.Models.Study> studies = Model.StudyDocuments.Where(s => s.Id == StudyID);
        if (Model.StudyDocuments.Where(s => s.Id == StudyID).Count() > 0)
            study = Model.StudyDocuments.Where(s => s.Id == StudyID).First();
        else return new NREPPAdminSite.Models.Study();

        return study;
        //return Model.StudyDocuments.Where(s => s.Id == StudyID).First();
    }
    
    string getAnswerText(List<NREPPAdminSite.Models.Answer> AnswerList, int inId)
    {
        foreach (NREPPAdminSite.Models.Answer anAnswer in AnswerList)
        {
            if (anAnswer.AnswerId == inId)
                return anAnswer.LongAnswer;
        }
                
        return "";
    }
    
    
    string isChecked(bool trueValue)
    {
        if (trueValue)
            return "checked";
        else return "";
    }
}

<div>
    <table>
        <tr>
            <th>Study ID</th>
            <th>Reference</th>
            <th>Year of Publication</th>
            <th>Found in Lit Search</th>
            <th>Exclusion 1</th>
            <th>Exclusion 2</th>
            <th>Exclusion 3</th>
            <th>Study Design</th>
            <th>Reccomend Review</th>
        </tr>

        @foreach (NREPPAdminSite.Models.Study study in Model.StudyDocuments)
        {
            <tr>
                <td class="withborder">@study.StudyId</td>
                <td class="withborder">
                    @Html.ActionLink(getReference(Model.TheDocuments.ToList(), study.DocumentId)
                    , "GetFile", "Admin", new { FileId = study.DocumentId }, null)
                </td>
                <td class="withborder">@getPubYear(Model.TheDocuments.ToList(), study.DocumentId)</td>
                <td class="withborder"><input type="checkbox" checked="@isChecked(study.inLitSearch)" disabled /> </td>
                <td class="withborder">@getAnswerText(Model.Exclusions.ToList(), study.Exclusion1)</td>
                <td class="withborder">@getAnswerText(Model.Exclusions.ToList(), study.Exclusion2)</td>
                <td class="withborder">@getAnswerText(Model.Exclusions.ToList(), study.Exclusion3)</td>
                <td class="withborder">@getAnswerText(Model.StudyDesigns.ToList(), study.StudyDesign)</td>
                <td class="withborder"><input type="checkbox" checked="@isChecked(study.RecommendReview)" disabled /></td>
            </tr>
        }
    </table>
</div>

<div>
    <table>
        <tr>
            <th colspan="5">Outcomes</th>
        </tr>
        <tr>
            <th>Outcome</th>
            <th>Measures</th>
            <th>Population Description</th>
            <th>Studies</th>
        </tr>
        @foreach(NREPPAdminSite.Models.Outcome anOutcome in Model.Outcomes.MacroOutcomes)
        {
            <tr>
                <td class="withborder">@anOutcome.OutcomeName</td>
                <td class="withborder">@MeasuresList(anOutcome.Id)</td>
                <td class="withborder">@PopList(anOutcome.Id)</td>
                <td class="withborder">@StudyList(anOutcome.Id)</td>
            </tr>
        }
    </table>
</div>

<div>
    <table>
        <tr>
            <th class="withborder">Outcome Name</th>
            <th class="withborder">Outcome Measure</th>
            <th class="withborder">Population Description</th>
            <th class="withborder">Reference</th>
            
        </tr>
        @foreach(NREPPAdminSite.Models.Outcome anOutcome in Model.Outcomes.MacroOutcomes)
        {
            foreach (NREPPAdminSite.Models.OutcomeMeasure om in Model.Outcomes.OutcomesMeasures.Where(o => o.Id == anOutcome.Id))
            {
                NREPPAdminSite.Models.Study study = getStudy(om.StudyId);
                <tr>
                    <td class="withborder">@anOutcome.OutcomeName</td>
                    <td class="withborder">@om.OutcomeMeasureName</td>
                    <td class="withborder">@om.PopDescription</td>
                    <td class="withborder">@getReference(Model.TheDocuments.ToList(), om.DocumentId)</td>
                </tr>
            }
        }
    </table>
</div>


<div>
    @using (Html.BeginForm("SaveNotes"))
    {
        @Html.HiddenFor(m => m.TheIntervention.Id);
        @Html.HiddenFor(m => m.TheIntervention.SubmitterId);
        @Html.HiddenFor(m => m.TheIntervention.StatusId);
        @Html.HiddenFor(m => m.TheIntervention.ProgramType);
        @Html.HiddenFor(m => m.TheIntervention.Title)
        @Html.HiddenFor(m => m.TheIntervention.FromLitSearch)
        @Html.HiddenFor(m => m.TheIntervention.FullDescription)
        @Html.HiddenFor(m => m.TheIntervention.SubmitterId)
        @Html.HiddenFor(m => m.TheIntervention.UpdatedDate)
        @Html.HiddenFor(m => m.TheIntervention.Acronym)
        
        @Html.Hidden("Redirect", "ScreenResults")
        
        <span>Notes: </span>
        @Html.TextAreaFor(m => m.TheIntervention.ScreeningNotes)<br />
        
        <input type="submit" value="Save Notes" /> @Html.ActionLink("Mark Complete or Return to Review Coordinator", "Assignment", new { InvId = Model.TheIntervention.Id });
    }
</div>

<script type="text/javascript">
    var thisIsAThing = 5;
    var currentStudy = new Array();
    var currentOutcomes = new Array();

    function makeRecord(Id, StudyId, Reference, inLitSearch, Exclusion1, Exclusion2, Exclusion3, StudyDesign, BaselineEquiv,
        UseMultivariate, SAMSHARelated, AuthorQueryNeeded, RecommendReview, Notes, DocumentId) {
        var anObject = {};

        anObject.Id = Id;
        anObject.StudyId = StudyId;
        anObject.Reference = Reference;
        anObject.inLitSearch = inLitSearch != "False";
        anObject.Exclusion1 = Exclusion1;
        anObject.Exclusion2 = Exclusion2;
        anObject.Exclusion3 = Exclusion3;
        anObject.StudyDesign = StudyDesign;
        anObject.BaselineEquiv = BaselineEquiv;
        anObject.UseMultivariate = UseMultivariate != "False";
        anObject.SAMSHARelated = SAMSHARelated;
        anObject.AuthorQueryNeeded = AuthorQueryNeeded != "False";
        anObject.RecommendReview = RecommendReview != "False";
        anObject.Notes = Notes;
        anObject.DocumentId = DocumentId;

        return anObject;
    }

    function makeOutcomeRecord(OutcomeId, StudyId, Measure, PopDescrip) {
        var anObject = {};

        anObject.Id = OutcomeId;
        anObject.StudyId = StudyId;
        anObject.Measure = Measure;
        anObject.PopDescrip = PopDescrip;

        return anObject;
    }

    @foreach(NREPPAdminSite.Models.Study item in Model.StudyDocuments)
    {
        @:currentStudy.push(makeRecord(@item.Id, @item.StudyId, '@item.Reference', "@item.inLitSearch", @item.Exclusion1, @item.Exclusion2, @item.Exclusion3, @item.StudyDesign, '@item.BaselineEquiv', "@item.UseMultivariate", @item.SAMSHARelated, "@item.AuthorQueryNeeded", "@item.RecommendReview", "@item.Notes", @item.DocumentId));
    }

    @foreach(NREPPAdminSite.Models.OutcomeMeasure om in Model.Outcomes.OutcomesMeasures)
    {
        @:currentOutcomes.push(makeOutcomeRecord(@om.Id, @om.StudyId, "@om.OutcomeMeasureName", "@om.PopDescription"));
    }


</script>

